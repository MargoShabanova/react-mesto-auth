{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._headers = headers;\n    this._baseUrl = baseUrl;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  getProfile() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._checkResponse).catch(console.log);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(this._checkResponse).catch(console.log);\n  }\n\n  editProfile(name, about) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(this._checkResponse).catch(console.log);\n  }\n\n  addCard(name, link) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(this._checkResponse).catch(console.log);\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(this._checkResponse).catch(console.log);\n  }\n\n  deleteLike(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(this._checkResponse).catch(console.log);\n  }\n\n  addLike(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"PUT\",\n      headers: this._headers\n    }).then(this._checkResponse).catch(console.log);\n  }\n\n  changeLikeCardStatus(id, state) {\n    return state ? this.addLike(id) : this.deleteLike(id);\n  }\n\n  editAvatar(avatar) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar\n      })\n    }).then(this._checkResponse).catch(console.log);\n  }\n\n}\n\nexport const api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-44',\n  headers: {\n    authorization: '0d3ef27f-f4a5-410a-8f5b-217508f8811f',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"names":["Api","constructor","baseUrl","headers","_headers","_baseUrl","_checkResponse","res","ok","json","Promise","reject","status","getProfile","fetch","then","catch","console","log","getInitialCards","editProfile","name","about","method","body","JSON","stringify","addCard","link","deleteCard","id","deleteLike","addLike","changeLikeCardStatus","state","editAvatar","avatar","api","authorization"],"sources":["/Users/margaritasabanova/Documents/dev1/mesto-react/src/utils/api.js"],"sourcesContent":["class Api {\n    constructor({baseUrl, headers}) {\n      this._headers = headers;\n      this._baseUrl = baseUrl\n    }\n\n    _checkResponse(res) {\n        if (res.ok) {\n            return res.json();\n        } else {\n            return Promise.reject(`Ошибка: ${res.status}`);\n        }\n    }\n\n    getProfile() {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers: this._headers\n        })\n        .then(this._checkResponse)\n        .catch(console.log)\n    }\n  \n    getInitialCards() {\n        return fetch(`${this._baseUrl}/cards`, {\n            headers: this._headers\n        })\n        .then(this._checkResponse)\n        .catch(console.log)\n    }\n  \n    editProfile(name, about) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: \"PATCH\",\n            headers: this._headers,\n            body: JSON.stringify({\n                name,\n                about\n            })\n        })\n        .then(this._checkResponse)\n        .catch(console.log)\n    }\n\n    addCard(name, link) {\n        return fetch(`${this._baseUrl}/cards`, {\n            method: \"POST\",\n            headers: this._headers,\n            body: JSON.stringify({\n                name,\n                link\n            })\n        })\n        .then(this._checkResponse)\n        .catch(console.log)\n    }\n\n    deleteCard(id) {\n        return fetch(`${this._baseUrl}/cards/${id}`, {\n            method: \"DELETE\",\n            headers: this._headers\n        })\n        .then(this._checkResponse)\n        .catch(console.log)\n    }\n\n    deleteLike(id) {\n        return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n            method: \"DELETE\",\n            headers: this._headers\n        })\n        .then(this._checkResponse)\n        .catch(console.log)\n    }\n\n    addLike(id) {\n        return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n            method: \"PUT\",\n            headers: this._headers\n        })\n        .then(this._checkResponse)\n        .catch(console.log)\n    }\n\n    changeLikeCardStatus(id, state) {\n        return state ? this.addLike(id) : this.deleteLike(id)\n    }\n\n    editAvatar(avatar) {\n        return fetch(`${this._baseUrl}/users/me/avatar`, {\n            method: \"PATCH\",\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar\n            })\n        })\n        .then(this._checkResponse)\n        .catch(console.log)\n    }\n  }\n  \n  \n  export const api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-44',\n    headers: {\n      authorization: '0d3ef27f-f4a5-410a-8f5b-217508f8811f',\n      'Content-Type': 'application/json'\n    }\n  });"],"mappings":"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"},"metadata":{},"sourceType":"module"}